@spring_raining 00:04
こんにちは、UITの玉田です。今回も、UIT INSIDEを始めたいと思います。 
UIT INSIDEは、ユーザーインターフェースと、テクノロジーを愛する開発者のためのポットキャストです。 
最新のウェブ標準の動向や、開発フレームワークの変遷、UIやUXに関することを、毎週フロントエンド

@spring_raining 00:27
の情報を発信していくことを目的としています。さて 今回はですね、えっと、去年の暮れなんですけれども、State of JS という、毎年JavaScriptに関することをアンケートをとってその統計を公開するという

@spring_raining 00:45
ものがあるんですけれども、それの2022年度版が公開されましたので、 それの内容について、今回はアランさんお呼びして、色々見ていこうかなと思います。それではよろしくお願いします

@AlanGDavalos 01:00
よろしくお願いします。

@spring_raining 01:06
はい、では、State of JSは、本当に公式サイトを見てもらうとわかりやすいかなと思うんですけども、いろんなライブラリのトレンドとかを読むのに、すごくいいサイトだと思います。

@AlanGDavalos 01:20
そうですね、なんかまあ毎年やってる分、結構その年事の変わりを見るのがすごくいいと思いますし、 ただ、まあ最初に注意点ですけど。 
まあ、こういうのはあくまでアンケートなので、回答数は今回確か3万ちょいとかだったので、あのウェブ開発者は3万。なんか、世界中に3万人

@AlanGDavalos 01:46
だけなのかありえないので。なので、 あくまでこの結構偏りがある。あの回答は多々あるので、 ま、それを踏まえた上で、まあ聞いてくれればいいと思います。

@spring_raining 02:01
はい 本当に参考程度にという私も結構なんていうんですかね。あの真面目にというところもあるんですけど、ま、結構楽しみ的な感じで見てるところもあるので、 そういうスタンスで見るのが良さそうですね。

@AlanGDavalos 02:18
そうですね、それがちょうどいいと思います。

@spring_raining 02:24
じゃあ、えーっと、上から順に見ていこうかなと思うんですけれども、えっと、デモグラフィックスですね。まずはそこを見ていこうかなと思います。で、 まあ、色々と例えば年齢とかベースの英検年数とかそういった辺りですね。そうですね、私 が見た中で結構これ、あのー、今回変わってるなって思ったところで言うと、

@spring_raining 02:49
そうですね。例えば、Years of experienceなんで、あのJSを何年間経験しているかっていうところは、結構今回 実は変わってるところがあったりしまして、経験年数の短い人の回答が増えてるんですよね。実は で、ちょっと見てみると、もう5年以下の割合で見ると、大体2019年から2021年までは減少傾向が

@spring_raining 03:15
あったんですけども、 今回、2022年はえっと、10パーセント増えて、47.4パーセントが一応5年以下と回答みたいな感じにはいなってるんですよ。これ、あの 後で見ていくとこの傾向結構わかりやすくて、今年の特徴はそんな感じなのかなと。はい、個人的には見えて思いました。

@AlanGDavalos 03:40
そうですね、ま、確かに多分なんかそのーま経験年数でなんだろう、色々なところが ま影響されるんじゃないかなってところなんですよね。まあ、ただそれでもそのま5年以下ではあるんですけど、その ま、私の方がなんかま気になったのは、

@AlanGDavalos 04:01
その経験年数だと、ほとんどの人はま、3年から10年ぐらいの経験年数のなんだろう。間にいる っていう風に見ているので、全体的にはその例年よりは下がっている感覚はあるものの実際にそのほとんどはシニアというぐらいのなんだろう。まあ、そういう年数があるんじゃないかなって感じが

@AlanGDavalos 04:29
しますね。

@spring_raining 04:31
なるほど、なるほど でもそうですよね、過半数が5年以上ということなんで、まあ、やっぱりある程度こう経験を持っている人が答えてるっていうのは 確かだと思います。

@AlanGDavalos 04:43
そうですね、あとは、まあ個人的になんかちょっと。これは、あの、どうにかしたいところの1つは、 そのまあ、日本はそのデモグラフィクスのそのなんか、国のところにそもそも 入らないぐらい、なんだろう回答数が少なかったので、せっかく確か日本語版のあのアンケートもあるのに、

@AlanGDavalos 05:09
なんかもうちょっとその日本からの回答がないのはちょっとなんなんなんでだろうって思って、なんかもうちょっと 来年とかに、日本からの回答者をぜひぜひ増やしたいなってちょっと思いました。

@spring_raining 05:27
それなんですよ、本当にそう思います かろうじて、そのLanguageのところに、そのJapaneseが0.4パーセント。うん、うん、いるだけなので。 
いや、これなんとかしたいですよね。

@AlanGDavalos 05:42
なんか、まあ、さっきのそのバイアスっていうか、その話で、ほとんどの回答者が英語を話す、白人の男性っていうところがあるからで、しかも、ほとんどそのまあ割と大きめの。その100人以上の会社に働く人がほとんどなので、

@AlanGDavalos 06:03
まあ、なんかもうちょっとそのメリハリがあった方が、全体像をまあ見るには 良くなるので、ぜひぜひ、皆さんの来年の番もぜひ回答してくださいと言いたいですね。

@spring_raining 06:20
そうですね、いや、もうほんとにあの2023年の後半あたりで 毎年例年公開されてるので、ぜひ 回答して、次の年の0.4パーセントを増やしていきましょう。

@AlanGDavalos 06:38
はい、

@spring_raining 06:43
えっと、こっからは、Featuresをの話をしていこうかなと思います。Featuresも、JSの機能について、まさしく取り上げた ところなんですけれども、ここ何かこう気になるところとかはありましたか。

@AlanGDavalos 07:00
あ、個人的になんか1番気になったのは そのなんだろう。ほとんどの機能は、その去年とはさほど認知度で言えば、変わりがない中で、 2つだけすごく増えたのがあって、それがなんかちょっと気になったのが、

@AlanGDavalos 07:19
そのまあNullish coalescing、いわゆる、あのはてな2つのやつと、あとま、トップレベルでのawait がなんかすっごく伸びたんですよね。ここ3年で。それ見てると、あー。いや、なんかこういうところがみんな知らないうちに欲しかったんだなって思って、確かに私も出てからすぐ使い始めましたね。その2つを

@spring_raining 07:48
そうですよね。いや、本当にNullish coalescingとかって言うと、割とTypeScript由来みたいなところもあって、そこそこも影響 してるかのかもしれないですけども。これは本当に使ったことがあるが、70パーセントなんで、

@AlanGDavalos 08:03
そうそうそう、本当に。で、去年までは確かなんか50パーとかぐらいでしたよね。

@spring_raining 08:10
あー、ほうほうほう

@AlanGDavalos 08:11
なんか結構例年に比べて増えてますよね。これが

@spring_raining 08:18
あとはTop level awaitもそうですね。ま、これはなんていうんすかね。まあ、何か覚えるっていうよりは環境が対応しているかっていうところだと思うんですけど、やっぱりNode.jsが もう問題なく使える状態になってるので、それは大きいですね。

@AlanGDavalos 08:35
そうなんですね、うん、

@spring_raining 08:37
そうですよね、うーん、

@AlanGDavalos 08:39
まあやはりなんかまあJavaScript、ずっとありありな話で。 
まあ、対応されてから実際に使えるようになるので、 ま、こういう2つの対応がまあ、ここ2年で入って、あの

@AlanGDavalos 08:58
実際にみんなすぐ使い始めましたなっていう感じがしますね。だいぶ前からあるAPIよりは

@spring_raining 09:07
そうですね。ま、元々知ってて、あの、今回やって使えるようになったっていう感じかもしれないですね。うん、うん、 それ以外で言うとそうですね。あと、arrayの、array.prototype.atも順調に伸びて

@AlanGDavalos 09:26
去年追加されたばかりなのにね。

@spring_raining 09:32
これはでも、もうみんなこう待望だったんじゃないか。

@AlanGDavalos 09:38
そうですね、まー、そういう地味に欲しかったものが結構最近追加されてて、実際に使うまではあ、これ欲しかったなって気づくんですよね。タマダさんの方は、なんか気になるFeatureの傾向とかありますか。

@spring_raining 09:59
そうですね、ま、増えてるので言うとそこなんですけども、逆に全然知られてないな っていうところで言うと、errorのcauseオプションとか、あとtemporalかですね。 
そうですね、そこはtemporalはまあ確かにポリフィル使わないと使えないんで、まだまだもうちょっとかなとは思うんですけれども、その辺りはもっと こう

@spring_raining 10:26
知られてもいいんじゃないかなっていうところですね。うん、

@AlanGDavalos 10:31
そうですね、特にまあ、あの、さっきのエラーのその理由を追加するやつは、 まあ割と最近ではあるけど、まあ、多分もう1年以上前から追加されているものなので、 特定のところでしか。なんかすごい役立たないんだけど、なんか、そういう特定のところではすごい役に立つと思うので、もうちょっと認知してもらって、

@AlanGDavalos 10:57
まあ、実際に欲しいってなるタイミングで使えるようになると、すごいいいと思いますね。

@spring_raining 11:04
じゃ、ランゲージはその辺りで、あと、Browser APIっていうと までもこの辺りは結構あれですね。横ばいという感じが多い。 
あー、でもあれですね、あの、意外に思ったのはFile system access APIがすごく知名度が高いっていうのは意外でしたね。

@AlanGDavalos 11:27
そうですね、なんかまあこれ あの、ちょっと先走りになるんですけど、結構デスクトップ向けのアプリとか、あの、Node.jsのアプリを あの開発する人は、結構たくさんここに回答してくれてるっぽくて、なんかそれも影響していそうな

@AlanGDavalos 11:47
気がしますね。ま、それだけじゃないと思うんですけど、

@spring_raining 11:52
それはありそうですね、その結構、個人的にはデスクトップアプリを作るっていう用途があんまり考えてなかったんで、その Firefox全然対応してないのに、結構みんな使うんだなみたいな。そうですね、

@AlanGDavalos 12:11
なんか、ElectronとかTauriとか使うとFirefox。あの、気にしなくていいし、まあそこらへんですよね。あとは、まあ違う意味で、地味になんで知られてないのが ちょっと。web shareのapiが認知度がそこまで高くないのはちょっと。あの、個人的には不思議で、

@AlanGDavalos 12:37
正直なんか、ソーシャルのボタンより、これを使うのがすごく、個人プロジェクトでもそっちの方が好きなんで、あの対応が楽なんですし、だからなんかもうちょっとなんだろう、使っててもいいような気が。

@spring_raining 12:56
うん、

@AlanGDavalos 12:57
最近なんか、バージョン2が色々出てきて、もうなんだろうできることが増えていきそうなんで、 今のうちに知っといてほしいですね。はい、

@spring_raining 13:10
あ、それを言うと、確かにあのUIT INSIDE、普通にiframeでシェアボタンを埋め込んでる伝統的な方式なんで、この辺りは すぐに変えられるかもしれないですね。うーん、確かにですね、

@AlanGDavalos 13:26
ぜひ、それはもうぜひやっていきましょう。ま、それで、私たちが思いも知らない。snsでのシェアも簡単にできるようになるし、

@spring_raining 13:41
あとはIntl API確か、あの、以前 同じメンバーでUIT INSIDEで収録した。はいはい、しましたよね、

@AlanGDavalos 13:53
ちょうどIntlの話めっちゃしましたね、

@spring_raining 13:55
しました、しました。あのー、これもあの知名度的には横ばいっぽいんですけれども、なんてんすかね、使ったことあるの数値が順調に伸びてますね。これは、 割と知ったら、みんな使うっていうパターンで、私もおすすめだと思います。

@AlanGDavalos 14:13
そうですね、特になんか、日付のそのフォーマッティングにはすっごくいいんですよね。

@AlanGDavalos 14:21
なんか、日付のやり方は意外となんかこういう国が なんかめっちゃ変なやつ使うとかって、まあ、前の会でも話してるんで、

@spring_raining 14:34
これは、あのShow noteにじゃあリンクを貼っておきますね。確かそうですね、そんなにあの昔じゃなかったと思います。

@AlanGDavalos 14:42
そうですね、去年のうちにやっていましたね多分 あとはまあこのBrowser APIの部分で言うと、ま、それはこすごい個人的な話だけど、まあ、やはりなんかWeb components周りの標準は だいぶ知られてるのが嬉しいです。

@spring_raining 15:01
うん、うん、うん、そうですね、

@AlanGDavalos 15:03
その一言だけです。

@spring_raining 15:05
知られてはいるんですけど、使ったことがあるっていうのが意外と少ない。あの、これ使うの 定義にもよるかなと思うんですけれども、あのー、単純になんてんすかね。あの、もうすでに存在する wasmを使ってるっていう割合で言ったら、もう多分ずっと多いとは思うんですよね。

@AlanGDavalos 15:28
そうですね、なんかま結構人によってなんか使った言葉があるの。定義がま曖昧なのが、どれもに 当てはまるものなんですけど。でも、そうですね、 知らないうちに使ってる人が多いっていうところも、まあ、個人的に思ってるところなんですよね、

@spring_raining 15:49
確かに確かにいや、絶対あの使ってる人もっと多いと思いますよ。

@AlanGDavalos 15:55
そうですね、で分まフィーチャーの部分はまほとんど。なんかそのフィーチャーそれぞれの認知度の部分なんで、多分 これ以外はあんまり、うんないですかね。面白いところは、 まあwasmを使う人がぼちぼち増えてるところぐらいですかね。

@spring_raining 16:16
いや、それはいい傾向だと

@AlanGDavalos 16:22
なんだろう。やっとみんななんか、wasmを使うべきところがをちゃんと理解し始めている感じがしますね。

@spring_raining 16:34
じゃあ、はい、Featureはそんなところですか。

@AlanGDavalos 16:37
ですね、

@spring_raining 16:42
では、Librariesのところになります。で、これはまあ、いろんなライブラリーのトレンドについて 見れるところなんですけれども、まあ、最初のページがえーっと、いろんなライブリの。 
まあ、その使ってみてどうだったかっていう意見と使ったことがあるかっていうところの、二軸で

@spring_raining 17:07
表示されてるところですね。これ見ると結構わかりやすいかなと思うんですけれども、 じゃあ、ここの中で見るべきところってどこですかね。

@AlanGDavalos 17:22
そうですね、なんか、Libraries全体の傾向で言うと、なんか色々な 部分でこう。代替わりが今起こってる最中な感じが個人的にしましたね。 
あの、特にbuildとかtestとか、あのmobile/desktopとかの部分で、なんか

@AlanGDavalos 17:47
そういう傾向が結構強い感じがしましたね。front-endでも、まあちょこっとだけあるっぽいけど。

@spring_raining 17:56
そうですね、結構この傾向自体は割と2021年も見られたんですけれども、それがどんどん加速している ていうところですね。具体的に言うとあれですね、まあ、なんと言ってもViteの台頭、 あとはそうですね。ま、testingで言うと、Vitestとか、あとは、Tauri

@spring_raining 18:20
ビルドツールで言うと、まあ、Webpackが他のビルドツールに変わるみたいな、そういった流れは、やっぱりどんどん加速してってます。

@AlanGDavalos 18:29
そうですね、なんか特にそのなんだろう。なんかま、ViteとかAstroが出始めた時に、なんか結構 当時から。なんか、今後の時代は、そういう、フレームワーク問わずで使えるツールですよ。って、結構なんか言う人は あの出ていたんですけど、こういう結果を見ると、やはりそうだったんだなって

@AlanGDavalos 18:54
感じがしますね。そのViteの影響で、なんかWebpackの なんだろう。満足度がだだ下がりで、Vitestの影響で、なんかJestの 満足度がダダ下がりとか、あとは別の観点だと、まあのタマラさんが言ってたTauriで、

@AlanGDavalos 19:15
あのElectronがだだ下がりでま。Playwrightで、あのPuppeteerがだだ下がりとか。なんか、そういう代替わりが結構激しいんですよね。

@spring_raining 19:26
ま、その傾向は確かにはっきりしてる感はありますね。

@AlanGDavalos 19:30
まあ、利用率で言えば、なんかまあ今言ってたライブラリーの その利用率は、そこまで下がってはいないんですけど、満足度の方がすごい下がってるっていうのが、結構目立つ 感じがしますね。そのー、State of JSのサイトになんかあのtier listっていうのがあるんですけど、なんかそこに

@AlanGDavalos 19:53
まあだいぶ なんだろう、満足度でいうと、なんかどういう値がなんか1番満足度高いみたいなのを、結構なんか割とわかりやすく見れるような感じになってるので、ぜひ皆さんにも見ていただきたいですね。

@spring_raining 20:12
tier list確か、去年から導入、出ましたよね、すごくわかりやすいですね。

@AlanGDavalos 20:18
そうですね、本当になんか多分ライブラリーの部分で言うと、 なんか本当にこれだけ見るだけでも、詳細はそこまで見なくても、ほとんどなんかこれだけで済むかもしれないですね。

@spring_raining 20:33
うん、うん、うん、

@AlanGDavalos 20:34
まあ、もちろんそのなんだろう。使ってる人が、一定数を超えてないのが、まあ、 あの入ってないのがあるのですが。まあ、回答者の中でポピュラーなやつがなんかこういうところでままとめられてる感じがしますね。

@spring_raining 20:53
では、それぞれのまあライブラリについて見ていきますか。えーっと、じゃあ、front-end framework ていこうかなと思います。これは、結構、傾向的には、そんなに変わりはないかな。去年からは

@AlanGDavalos 21:12
そうですね、多分なんか唯一のなんだろう、変わりらしい変わりがなんか、Solidが結構 その満足度というか、なんか使ってる人が増えてる感じが強いぐらいですよね、それ以外はほとんど動いてない感じですね。

@spring_raining 21:30
はい、そうですね、あの使用率がSolidはすごく上がっていて。結構そのリテンション の数値は、あのー、さっきのなんて言うんですかね。その経験年数のこともあって、 パーセンテージで見ると、今年下がっているライブラリが多い中Solidが上がっているっていうところです。ま、Svelteも

@spring_raining 21:54
その、維持してますし。

@AlanGDavalos 21:56
そうですね。なんか本当にあのー、まあ、今回あの初めて入ったQwikはちょっと 参考のしようがないんだけど、それ以外のライブラリーはほとんど本当になんだろう。今までの 満足度を維持しているんですよね。

@AlanGDavalos 22:15
まあ、だいぶなんかまだ下がってるのは、Emberぐらいなんですけど、まあ、それはもうある意味しょうがないので、 それ以外はほとんど同じなんで。まあ、そうですね、なんか 多分そのフロンテンドで、実際になんかもっと動きがありそうなのは、今年なんじゃないかなと思いますね。

@AlanGDavalos 22:40
そのSolidとか、Qwikのなんか、勢いがそのまま増していけてたらっていう話で

@spring_raining 22:47
ですね。あとは、えっと、この1番上の表には入ってないんですけども、あの、other toolsを見ると、 やっぱりAstroが多いですね。

@AlanGDavalos 23:01
そうですね、まあ、Viteと同じで、結構なんかフレームワークを自分で自由に使えるってところが、 まあ目立つやつなので、うん。まあ、レンダリングフレームワークにもあの一応Astroが入るので。 
なんかまあ、どちらかというと、そっち方面のなんかツールではあるんですけど。

@spring_raining 23:29
そうですね、表現が難しいですけど、どちらかというと、やっぱりそうですよね。front-end frameworkではない気は

@AlanGDavalos 23:35
そうですね。なんか、どっちかといえば、まあ、SSRっていうか、SSGというか、そっち方面の感じのツールですね。一応、次のやつへの繋がりにはなるんですけど、そのAstroはそのま、rendering frameworkでは、一応あのグラフには入っていて、 で、ここでまちょうど、ちょうどAstroで気になってたのは、

@AlanGDavalos 24:00
なんか、AstroとSveltekit以外はほとんど。なんか満足度が下がってる中で、その2つだけが、 まあ同じか、もうちょっと増えてる印象なんで。そうですね。 
あとは、なんかGatsbyの下がり方は異常に、なんか異常なぐらいに下がってるので、まあ

@AlanGDavalos 24:26
結構ね。なんか、Gatsbyとかまこれ、NuxtとかにもNextにも当てはまるんですけど、なんか 言うて、なんかJSめっちゃ入れてるので、それにみんな気付き始めてるかな。

@spring_raining 24:45
そうですよね、あのー、アランさんといえば、去年、 そのLINEのブログで、そのJSのまあ、使用率みたいな観点で見ると、やっぱり新しく出てきた。そういった ライブラリに分があるっていうところが、まあすごくよく言われていたと思うんですけれども、

@spring_raining 25:07
そうですよね。やっぱりそういった意味で言うとこう。昔からあるライブラリがずっと使われ続けるっていうのが、 だんだん難しくなってきてるっていうのは、そのコードの歴史による肥大化ですね。 
そういった面で言うと、

@AlanGDavalos 25:26
そうですねま、あとは本当になんか。まあ、このrendering frameworkの例で言うと、 そのNuxtとか、Nextとか、Gatsbyはなんかサーバーで色々やります。って言いながら、なんかフロントエンドでも色々やってる中で、 なんかAstroとかは、それと違って、本当にJavaScriptほぼ0で、

@AlanGDavalos 25:51
あの利用できることはあるので。なんかそういうところも、まあ、こういった満足度に繋がってるんじゃないかな。なんか、こう フレキシブルっていうか、なんかJSを必要なだけ使えるとか。なんか、そういった部分も多分評価の うちに入ってるんじゃないかなと思いますね。まあ、もちろんそのまNextとかNuxtだとまあ

@AlanGDavalos 26:15
React、Vueだけ使えるけど、Astroだと両方使えるとか、なんか、そういったところも多分評価のうちですよね。

@spring_raining 26:26
それ以外のツールで言うと、あー、SolidStartはこの中には入ってないんですけど、そのSolidでいうSvelteKit的なやつですね。うん、これはちょっとそうなんですよね、あのー、まだ結構ベータ版という感じが 個人的にはしてる気はするんですけども、今後は結構伸びそうな

@spring_raining 26:54
気はしますね。やっぱり、そのなんていうかSvelteKit的なツールは必要だと思います。

@AlanGDavalos 27:00
そうですね、なんか、Solidのフロントエンドでのなんか評価がそのままレンダリングのフレームワークで繋がってたら、まあ、来年とか再来年のあたりに、なんかそういう。 
なんか、SolidStartがなんかそういうま満足度での位置づけも、似たようなものになるんじゃないかなと思いますね。

@spring_raining 27:22
ですよね、いや、これは結構重要ですね。SolidStartの出来によって変わってくるっていう可能性は十分にあり得る 注目したいです。えーっと、じゃあ、次testingですねtestingはランキングで言うと、 そうですね、やっぱりVitestですねtesting libraryも人気はあり、あと、Playwright。

@AlanGDavalos 27:50
そうですね、なんか、さっきの代替わりの話にも繋がるけど、まあ、やはりそのなんかJest とか。あのま、Puppeteerはまそのまま。なんかPlaywrightとVitest なんか似たようなAPIだけど、なんかもうちょっと軽量でかつ。まあ、

@AlanGDavalos 28:13
今流行りのところとかで使えるとか。ま、Playwrightの場合は、まあ、複数のブラウザーで使えるとか。なんかそういった部分があることで、 ま、やはり打ち勝ってる感じがしますね。なんか、直接そのなんか、Vitestの伸びがJestの下がりに 直接影響してそうな気がしますね。

@spring_raining 28:35
そうですね、いや、Jestは本当にesm対応が遅かったのが痛いですね。いや、なかなか やっぱり待ちきれなかったっていうところは、個人的には大きいかなと思います。

@AlanGDavalos 28:50
そうですね、まあ、あとはそのなんだろう。Jestが使う、なんか、DOMをシミュレートするライブラリが まーちょっとなんか対応が遅いっていうか、なんか、あとはVitestも実際にブラウサーで直接テストしてないので、なんかまあ、それもちょっと。 
あの、個人的にはあんまり好きじゃないところではあるんですけど、まあ、やはりあのー、

@AlanGDavalos 29:16
なんかそういった部分を長く維持するのが難しいですね。

@spring_raining 29:22
いや、そうなんですよね、テストもなかなかなんていうんですかね。こうしがらみがあるっていうの、本当に なかなか難しいところです。同じ面で言うと、やっぱりPlaywrightとPlaywrightの代替わりは 見ておくべきですね。

@AlanGDavalos 29:43
そうですね、 あとはまあこれはすごい個人的な話ではあるんですけど、そのotherになんかギリ入ってる。あの、Web test runnerの方が なんか個人的に推しの1つで、まあ、実際にJestとかVitestと違って

@AlanGDavalos 30:02
その内部で、Playwrightとかを動かして、なんか直接テストをブラウザーで実行しているので、実際にアプリとして動くタイミングで、どういう風にコードが影響するのに、 より近くテストできるので、まあ、

@AlanGDavalos 30:23
個人的にはそっちの方をちょっと伸びてもらいたいところではあるけど、まあ、Viteのねえ、その影響力には 勝てないなってちょっと思いますね。

@spring_raining 30:36
あの、あれですよね、確かModern webのっていうの。

@AlanGDavalos 30:41
そうですねのテストツールです。

@spring_raining 30:43
ですよね、うん、うん、うん、うん、ちょっと見ておきたいです。で、結構頑張ってるなと思うのは、Storybookですね。Storybookが ここに来て、満足度が下がってはいるんですけれども、なかなか維持している。すごく 個人的には、一昔前のStorybookってだいぶしんどかったんですけれども、それでもちゃんと持ち直してるっていうのは

@AlanGDavalos 31:10
そうですね。特になんか最近まあ直近でなんか7.0が出そうな感じで、 あの色々と改善を行っているっぽいので、なんかそれが引き続きできてたら、まあ、もっと長く あのツールとしてなんだろう。まあ、満足度が少しずつ下がり気味ではあるけど、まあ、ユーザー数を

@AlanGDavalos 31:38
一定数持ち続けることはできるんでしょうね。

@spring_raining 31:42
これは割とそうですよね、なかなかない例だと思います。では、mobile & desktopなんですけども、ちょっと。ここに関しては、本当に私の 経験がそれほどないので、ちょっと申し訳ないんですけれども、まやはりTauriが人気が

@spring_raining 32:05
良いですね。

@AlanGDavalos 32:06
そうですね、私もまあそこまで詳しくはないので、ま、ここは多分あのすぐすぐ終わる話かもしれないんだけど、まあ、なんかTauriが Electronの代替わりになってそうな雰囲気が見受けるし、 あと、気になったのはまあ、モバイル用のツールが大体満足度が

@AlanGDavalos 32:27
下がってる全員なんかでも、全部下がってるのがちょっと気になってて、なんかDartの影響なのかなって、ちょっと 個人的に思うところはあるけど、それをなんか裏付けるデータはないので、 あくまで私の個人的な仮説として受け取ってください。

@spring_raining 32:48
Dartか、そうですね、そのマルチプラットフォームのモバイルアプリっていうこと自体が結構難しいなと個人的には 思っていて、今回その特にそのなんだ。経験年数が下がる傾向があったっていうところもあって。いや、正直にReact nativeで まあできるんですけど、結構あの、なんて言うんですかね。こう、両方の知識をやっぱりどうしても求められてしまうんですよね。そのandroid

@spring_raining 33:17
アプリの開発と、iosアプリの開発の知識がどこかで、ちょっと必要になる。あのー、それを 一応回避するっていうやつが、あの、いわゆるExpoとかですかね、その辺りは、あのExpoっていうのはですかね。React nativeの上で 動くものなんですけども、ただ、やっぱり辛い辛いというか。まあ、色々とあのはあのハードルがあるっていうところが事実なんで。

@AlanGDavalos 33:46
そうですね。まあ、多分なんだろう。最も、何かできそうなところの1つは、ここらへんですよね。こま、ウェブかNode.js以外のあのプラットフォーム向けのアプリで、 多分なんかここが1番。なんか、満足度があんまりない

@AlanGDavalos 34:06
ところの1つなので、ま、是非。なんかいアイデアのある人は、ツール作ってくださいって言うしかないです。

@spring_raining 34:15
そうですあ、あとあれですね、Tauriそういえば、あのTauri mobileというモバイルアプリ開発向けのライブラリが出てたと思うんで、それは

@AlanGDavalos 34:25
確かにそれはちょっと面白そうですね。

@spring_raining 34:27
ちょっと来年どう食い込むかは気になります。

@AlanGDavalos 34:31
確かに、うん、楽しみですね

@spring_raining 34:35
では、build tooldですね。build toolは、結構個人的には本当に 傾向が現状維持という感じではありますね。

@AlanGDavalos 34:48
そうですね、ま、Viteとesbuildの2人勝ちっていうか、 Rollupの満足度が下がるのって、なんか、Viteが内部で使ってるのに、あの下がってるのがちょっと面白いなと思いました。重い中だけど、まあ、そうですね、 Webpackへの辛さがだいぶ溜まってたなというかで、

@AlanGDavalos 35:17
まあ、5.0とかで多分 みんなが欲しいほどの改善ができなかったのかもしれないですね。なんか、今時Webpackで、その あのesm用のライブラリビルドを出力するには、一苦労する中で、

@AlanGDavalos 35:38
こういうのもあれなんですけど、なんか、Webpackはそろそろ卒業することになるんじゃないですかね。

@spring_raining 35:45
そうですね、いや、新しくそうです。新規開発で、Webpackを導入する意義は、私ももうないかなとは思います。

@spring_raining 35:54
それぞれ良いツールがもう本当に出てきているので。

@AlanGDavalos 35:59
そうですね。まあ、強いて言えばなんか純粋なTS。あの、TypeScriptのCLIを使うことでもいいんですよね。 
あ、結構それに人気度はまだまだ、高そうですよね

@spring_raining 36:15
高いですね。結構意外だったのは、あのesbuildも注目度もそうなんですけれども、その 利用率がesbuild上がってるっていうのは、意外で、結構あのーesbuildそのまま使うよりは、 むしろ他のライブラりの中でesbuildを使ってるみたいな、あのスタンスなのかなと思ったんですけども、結構ここに来て、

@spring_raining 36:40
直接esbuildを使うっていうケースが多いっていうのは、あの 割と興味深いものでしたね。

@AlanGDavalos 36:52
まあ、そうですね、なんかそこまでなんだろう。スペックがすごいひろ、広くないようなアプリとかでしたら、 ま。確かに、なんか純粋にesbuildだけで、色々やるのも できるにはできるので、ま、その速さに魅了されてやる人がいるんじゃないですかね。

@spring_raining 37:16
そうですね、それ以外は、Snowpackとかは 結構注目はしてたんですけれども、やっぱりあの、もう本当に完全にViteに移行してしまったっていうところと、あとは、 あー、そうですね、SWCはやっぱり順調に伸びてますね、Next.jsパワーで。

@spring_raining 37:43
そうですね、結構そうSWCはあのー、私もあの最近ちょっと使ったことがあったっていう程度だったんですけど、あのー、 やっぱりいいのはあれですね。その後方互完性というか、ちゃんとes、 今でもes5の出力に対応してるっていう

@spring_raining 38:05
ところとか、割とesbuildの対極なのかなっていう風に思いましたね。そのesbuildは、その機能を絞っていく方面なんですけど、SWCは 割といろんな環境をサポートしてるっていうのは、触ってみて、気づいたところはその辺り なんで。そうですね。本当に純粋なWebpackの代替っていう意味で言うと、確かにSWCはありなのかなと

@spring_raining 38:34
思いました。

@AlanGDavalos 38:36
そうですね、まあ、ただ多分、これはちょっと個人的な意見にはなるんですけど、 まあ、やはりViteがもたらす。その使いやすさっていうか、なんかあんまり 気にしないで色々できるっていうところが。今後、多分、さらになんかViteの

@AlanGDavalos 39:00
あの認知度を高くしてくるんじゃないかな。

@spring_raining 39:05
そうですよね、ブラウズ自体もそうなんですよね、進化していくっていうところで、その環境、 その昔のブラウザをサポートってするっていう必然性がどんどんなくなっていくっていうところが 見えているんで、そういう意味でも確かにそうですよね。

@AlanGDavalos 39:22
なんか、IEのあの利用率は世界的に0.2パーセントぐらいになってる中で、まあ、esmじゃないものにするには、相当な理由がある。いると思いますね。

@spring_raining 39:39
そうですね、うん、私もしばらくViteの天下が続くっていうところについては賛成です。 
では、えーっと、monorepo toolsですね、ここはどうでしょうか。

@AlanGDavalos 39:56
ま、ほとんど変わっていないが、まあ、 そうですね、ほとんどほとんど変わりがないんですよね、そう、その一言につけるんですよね。あとは、 まただ1つだけ気になってるのは、そのLernaが

@AlanGDavalos 40:16
少しずつではあるんですけど、なんか、満足度が下がりつつあるんですよね。その1番人気ではあるんですけど、 これもまあそのモバイルと同じで、結構みんな不満が溜まってそうなところの1つなので、 これはまさになんか何かいいのが出てきたら、一気にあのViteみたいに、なんか一気に活性化してしまいそうな

@AlanGDavalos 40:45
気がしますね。

@spring_raining 40:47
確かにそうですね、Lernaっていうと、あの、多分NxとLernaって結構なんてすか。近いというか、Lernaの移行先として、Nxを推奨されるっていうケースが多いのかなと思うんですけど、も。 
でも、Nx側もそんなにめちゃくちゃ人気が伸びてるかと言われると、

@AlanGDavalos 41:13
そうで、そうなりますよね。

@spring_raining 41:15
そうそう、そうなんですよ、それがなかなか気になっているんですよね。

@AlanGDavalos 41:20
まあ、モノレポ自体を作るのは、まあ、相当の辛みがある ものなので。で、今あるツールはまじり。なんか仕事してくれてはいるけど、 まあ、やはりどれもまだね。みんなを納得させるほどのものを提供できていなさそうな感じがしますね。

@AlanGDavalos 41:46
まあ、自分で作れるかっていうとそうでもないんですけど、まあ、やはり何かがこう。まあ、イノベーション のできそうな領域の1つにはなってると思いますね。ここは、

@spring_raining 42:01
あの、1番下のそのモノレポツールを使って、ハッピーですか？ みたいな意見で言うと、ハッピーじゃないニュートラルがすごく多くて、 まあ、使えてはいるけど、そんなにいいと思って使ってるかって言われるとそうでもないみたいな。

@AlanGDavalos 42:18
そうそうなんか、ほとんどのところだと、ハッピー以上の人はなんか3割以上だったりする中で。 
まあ、なんかこのモノレボとか、モバイルデストップのところだと、まあ、2割ちょい とかだったりするから、まあ、そうなんじゃないかな。ですね、

@spring_raining 42:39
個人的にはTurborepo推しなんですけれども、そうやっぱり概念が難しいと思うんですよね。そのグラフとか いきなり出てきてわかるが、何かこう。新しい、その技術的な新しさじゃなくて、考えとしての新しさが 出てこないと難しいのかなとは思いますけど、なかなか難しそうですよね。そうですね、

@AlanGDavalos 43:07
今後どうなるかはまあ多分当分あんまり変わらないけど、ちょっとなんか イノベーションが欲しいところの1つですね。

@spring_raining 43:19
ですね、

@spring_raining 43:22
ではだいぶ長くなってしまったんですけれども、じゃあ、ちょっとother toolという章もあるので、ここもちょっと ざっくりと見ていきます。じゃ、ここで何か見ておきたいところで言うとどうでしょう。

@AlanGDavalos 43:39
なんか、ここで多分 4つぐらい。あの、ちょっと気になったところがあるんですけど、ま、この中なんかこのこの回答者の中で、そのjQueryを使う人は、 まあ12パーセントとかっていう話で、

@AlanGDavalos 43:53
まあ、サンプリングのバイアスの話に戻ってしまいますね。まあ、ほとんどのwebがあのjQueryをまだ使ってる中で、 まこここに来て、jQuery使う人はほとんどいないっていうのは、まあそういうことだなって感じですね。 
まだいだあの、ある程度のそのなんだろう。技術力があるっていうか、なんか、

@AlanGDavalos 44:19
ある一種のあの人だけが、なんかこういうところに回答してくれてそうな感じがしますね。

@spring_raining 44:26
それはあるかなと思います。

@AlanGDavalos 44:29
あとは、まあ deprecatedになってるのに、なんかまだmoment.jsを使ってる人が3割以上いるので、なんかやめときましょう。もう、メンテナンスすらされていないんです、

@spring_raining 44:43
これはほんとにそうですよね、いや、メンテナンスされてないんですよね、

@AlanGDavalos 44:48
そう、だから、なんかまあ、なんかこのチャートにあるdate functionsとか、Day.jsとかだ、Luxonの ほぼどれでもいいので、代わりに使ってください、

@spring_raining 45:02
その通りだと思います。Temporalって、そういえば、

@spring_raining 45:08
すぐで使えるのかな、Temporalが来るのが多分、あの、未来的には正しいかなと思うんですけど。

@AlanGDavalos 45:17
そうですね、まあ、TemporalとそのIntlの引き合わせで、 なんか、これらの代替わりをいずれできるようになるのが多分最適だと思いますけど。まあ、 あの、去年の記事でも話していたSafaryの2年問題があるので、

@AlanGDavalos 45:39
なので、まあ、当分ま何かのライブラリーを。まあ、結構day.jsとか。あの、date functionsはすごい軽量なので、まあ、 あんまり影響しないので、ぜひ使ってみてください。

@spring_raining 45:53
そうですね、まあ、どちらかを使っておけば、Luxonは使ったことないんですけど。そうですね、私もどっちかですね、day.jsか、date-fnsか。

@AlanGDavalos 46:06
私も大体その2つにしてしまいがちですあとはそうですね、 そのfetchの部分で、なんかAxiosがまあ引き続き。あの、高く使われてるんですけど、まあなんか、Node.jsのアプリだったら、まだちょっとわかるかもしれないんですけど、フロントエンドだと、ちょっとAxiosを使うのが、

@AlanGDavalos 46:32
なんかちょっと重いんですよね。今時だと、あの、なんかAxiosに変わって、まあ、純粋にfetchを使えるのもありますし。 
まあ、なんかAxiosならではのAPIのやり方が好きだったら、なんかちょっと軽量化したAxiosみたいなのが、あのいくつかあるので、 まあ、代わりにそれを使って見るのがちょっと個人的にいいと思うので、あの、ぜひみんな検討してくれるといいと思います。

@spring_raining 47:03
いや、本当に その通りですね

@spring_raining 47:06
あとはまああのーTanStack queryとか、Apollo clientとか、Apollo clientはちょっと違いますけど、swrとかもありますし。この辺りは必ずしもAxiosを使う必要はないっていうのは同意見です。

@AlanGDavalos 47:24
そうですね、まあ例えばの話なんですけど、その あの一つそのAxiosと同じAPIのあの、Redaxiosっていうライブリーがあるんですけど、 Axiosが11キロバイトなのに、なんかこっちは1キロバイトなんで、まあ、だいぶ。あのま、

@AlanGDavalos 47:46
正直なんか1番なのが、純粋にfetchを使うことなんですけど、まあ、そうそれがなんか難しい場合はま、こういった なんか軽量化したAxiosを使うのがいいと思いますね。あとは、ま、すごい気になったのは、 ここの回答者が

@AlanGDavalos 48:06
あのランタイムとして、1番よく使うのがブラウザーではなく、Node.jsが1番高いのがちょっと気になりました。そのブラウザーが6割で、Node.jsが7割ぐらいなんですよね。

@spring_raining 48:19
ほんとですね、

@AlanGDavalos 48:20
それがすごい気になりましたね。

@spring_raining 48:23
あのー、これ複数回答なら例えばあれですよね。フロントエンドエンジニアは、Node.jsとブラウザー両方使うけれども、そのサーバーサイドで JS使う人は、Node.jsしか回答しない

@AlanGDavalos 48:36
という風に、そうそう、あの、そういう風に受け取ってもいいと思います。うん、なので、 まあ割合で言えばちょっとサーバーサイド気味の人の方があの回答者に多いっていう感じですね。 
そのなんか、色々な回答の理由の説明には、

@AlanGDavalos 48:58
ちょっとだけなるかもしれないですけど。でも、そうですね、ま、個人的になんかここら辺で気になるところはそこですね。はい、

@spring_raining 49:08
あー、一点、あのzxの利用率がだいぶ低いっていうのは、ちょっとショックだった ですね。あの、UIT INSIDEでえ、取り上げたと思うんですけども、めっちゃ使い倒してるんですよ、zx

@AlanGDavalos 49:27
まあ、zxってまだお若いんですよ。なので、今後増えていくと、

@spring_raining 49:36
ありがとうございます

@AlanGDavalos 49:37
いや、あの、正直の意見なんですよ。なんか、結構その傾向的には、なんかzxの良さに気づいてる人がだんだん増えてるので、 まあ、なんか5割以上になることはさすがにないかもしれないんですけど、まあ増えていくんじゃないかなって、うん、 個人的には思いますね

@spring_raining 49:59
だと嬉しいです。それ以外はあれですね、章として追加されたのは、edge/serverless runtimes ってなんか前なかった気がするんですけども、これはもしかしたら最近追加されたかもしれないです。

@AlanGDavalos 50:16
そうですね、これはちょっと前あったか覚えてないんですけど、まあでもここでも、Lambdaが 王者だっていうところが、まあ、普段普段通りというか、まあ、AWSのクラウドのパワーが出てますね。

@spring_raining 50:35
そうですね、あ、でもCloudflare workersも。やっぱり

@AlanGDavalos 50:40
ま、どれもなんかすごい。なんか、みんなが使うっていうほどでもないんですよね。なんか、最大でも2割なんで

@spring_raining 50:49
ま、これは。でも、今後もしかしたらこう継続して取っていったら、なかなか傾向とかが見えるかもしれないですね。

@AlanGDavalos 50:59
そうですね、あとのセクションで言うと、usageですかね。次は ここで2点ほど個人的に気になったことがあるんですけど、あのJSとTSを使う割合、 そのまあどどれぐらいの時間でどっちを書いてるのかって言うと、なんかほとんどの人がまあ、

@AlanGDavalos 51:28
あのTSを書く時間の方が多いっていうことなんで、ま、これもなんだろう。 
まあ、ある意味そのバイアスの表しのではあるんですけど、まだ傾向としては、多分なんかTSを使う人がまだんだん増えて 言ってるんですよね、

@spring_raining 51:50
これ面白いですよね一方で、でもこうJS100パーセントjsっていうのも一定数いて、なんかこう 真ん中がへこむってのは面白いですね。

@spring_raining 52:04
逆だと思ってたんですけど、

@AlanGDavalos 52:06
まあ、なるほど、結構なんかTSをほとんど使う。なんか、 中立な人があんあんまりいないですよね。なんか、どっちかを使うかっていうと、

@spring_raining 52:20
そうですよね。

@AlanGDavalos 52:21
ま、やはりなんかコンパイルが好きか嫌いかの違いが結構激しいので。

@spring_raining 52:28
いや、これは興味深いですね。このうーん、なるほど、そっか、いや 普通なんか中間とかあると思うんですけど、全然ないないですね。

@AlanGDavalos 52:44
気になるところで言うと、ぜん。前回の質問で、なんか、Node.jsの環境を使う人が多いというのに、 なんかあの、フロントエンドのディブロップメントで使う人のほがほぼ100パーっていうまえとね、7割か 7割になってるのがちょっと面白いですね。

@spring_raining 53:06
あー、そうそうそうそうんですよね、

@AlanGDavalos 53:09
まあ、でもNode.jsっていうと、まあ、あの、なんか他の種類。なんかバックエンドだけじゃなくて、なんか まあ、えっと、デイターアナリシスとか。あの ま色々。なんかエンベテドアップスとか、なんか色々なところでも使えるかな。マシンラーニングとかですね。なんでまあ、

@AlanGDavalos 53:31
ちょっと面白いですね。

@spring_raining 53:35
本当にJSってなんでもできるなっていうのは、これを見ると改めて思いますね。

@AlanGDavalos 53:42
そうですね、あと、ま、ここで言うと、アプリケーションのパターンで言うと、 まだ。なんかま、ここの回答者で言うと、なんかまだほとんどの人がSPAを開発してそうなところですね。 
まあ、この数字をなんかちょっと例年とかに比べて、来年とかにも比べるのはちょっと面白そうですね。なんか、

@AlanGDavalos 54:07
SPAは最近ま色々悪いところが目立ち始めているというか、なんか、それを中心に いうことがま、Astroとかでもなんだろう。Astroの存在意義は、そもそもそれに対抗するための 1つなんで、なんかちょっとこれが今後どう動くかはちょっと個人的に気になりますね。

@spring_raining 54:31
うん、うん、はいはい、質問の内容があれですね。去年、1年間で使ったことがあるアプリケーションパターンなんですかね。

@AlanGDavalos 54:40
そうですね、で、最初はSPA、次はSSR SSGあとはまあMPAですね。 
てか、なんかまあ2、3、4、5はほとんどなんかSSR系ですね。 

@AlanGDavalos 54:58
もう1つだけ。あの、大切な部分があったんですけど、そのopinionsに

@AlanGDavalos 55:06
なんか今痛いところとなんだろう。JavaScriptに足りないっていうあの2つがあるんですけど、そこだけあの、最後にとっておきたいんですけど、 ここに回答してる人の中で、なんかま3割以上がなんかちょっとJavaScriptで、こういうところが辛いって思うのが ま。コードの管理、dependencyの管理、あとステートの管理ですね。っていうらしいで、確かに、それが

@AlanGDavalos 55:37
はいあります。

@spring_raining 55:39
そうそうですよね、いや、

@AlanGDavalos 55:40
これ

@spring_raining 55:42
前年からの傾向で言うとどうなんだろう、割と変わってなさそう。 
ステートマネジメントがやっぱり辛いっていうのは、1番1番共感するのは、ステートマネジメントですかね。 
その辺りかなとその割には結構ライブラリーとかでは、あまり取り上げられなかった気が。

@AlanGDavalos 56:05
そうですね。

@AlanGDavalos 56:07
なんか、そういうなんか、ステート管理のセクションなかったですね。

@spring_raining 56:10
そうですよね、なんか、RxとかRecoilとかいっぱいあるはずなんで、これはなんかそうですよね、もうちょっと 注目されてもよい気はしますよね。うん、うん、うんうん。

@AlanGDavalos 56:24
最後に取り上げたいところは、なんかJavaScriptに何が足りないと思うところで、まあ、トップスリーがあの まースタティックのタイプと、あのー、コモンのそのutil、あの標準のライブラリーと、 あとは、まあもっといいdateっていうか、日付の管理ですね、がトップスリーです。

@spring_raining 56:55
なるほど、なんか1番目と3番目はでも、

@AlanGDavalos 57:01
まあ、そろそろそうです、

@spring_raining 57:03
そろそろですよね、そう、あのスタティックタイピングは、ちょっとなんてんすかね。そのランタイムでのタイピングではないんですけども、そのそのままその なんて言うんすかね。いわゆる、そのチェックはしないけれども、その文法として、そのTypeScriptっぽい型の アノテーションっていうのは、来るっていうのはありますしまで、デートマネジメントはそれこそTemporalがありますし。

@AlanGDavalos 57:31
うん、

@AlanGDavalos 57:32
まあ、多分なんかこのリストの中に書いてるのは、ほとんどなんか何かのプロポーサルがあるものだと思うんですよね。で、 まあその中でこの3つがなんか1番回答数が多かったのはちょっと 面白いですね。なんか、やはりなんかTypeScript書く人が多いとなると、みんなJSにスタティックタイプが

@AlanGDavalos 57:55
欲しいですよ。みたいな回答になるんですよね、

@spring_raining 57:59
はいはい、そっかま、それは確かに

@AlanGDavalos 58:04
多分ちょうどそのスタティックタイピングが欲しい割合が、なんかJSをあのTSを あのー、7割以上の時間で書く人の割合と、多分近いと思いますね。

@AlanGDavalos 58:19
多分これでほとんど全部見ましたね。

@spring_raining 58:24
はい、いや、長丁場ありがとうございます

@AlanGDavalos 58:28
はい、

@AlanGDavalos 58:30
いや、なかなかなんだろう。実際に分析してみると、まあ、面白いところは多々ありますね。

@spring_raining 58:40
そうですよね、いや、やっぱりこう、JSがなんでもできるんで、本当に開発の多様性とか、 こんなにそのライブラリーとかいっぱい見ていくっていうのも、なかなかか他の言語ではないことかなと思うので。

@AlanGDavalos 58:59
そうですね、

@AlanGDavalos 59:02
なかなか他の開発をやってると気づかないもんなんで、 まあ、何かの参考になっていったらよかったと思いますね。ですね、

@spring_raining 59:13
いや、フロントエンドほんと楽しいですね。

@spring_raining 59:22
では、最後に1点なんですけど、えっと今回そのState of JSというまー、全世界でのサーウェイがあったと思うんですけれども、一応 LINEのUITもですね。あの、同じようなUIT Surveyというえー、統計も毎年取っていたりします。で、えーっと、 これは

@spring_raining 59:43
確かPodcastでの収録も確か、今後あるかなと思うので、えっと、ぜひそちらも見て、まあ、その全世界の傾向と LINE社内での傾向みたいなのの違いとかも一応見れたりするので、ま、そういったところもぜひ見ていってもらえると嬉しいです。 
はい、というのが多分、そのうち収録されるので、よろしくお願いします。告知です

@spring_raining 60:14
今回はState of JS 2022について、アランさんに、話を聞いてみました。 
LINEのフロントエンド組織UITでは、このような技術的なキャッチアップを日々行っております。 
UIT INSIDE以外にも、毎週の社内勉強会で、フロントエンドの情報交換を行っています。
今後もUIT INSIDEを通して、このような情報を外部に発信していけたらと思います。 
それではアランさん、ありがとうございました、

@AlanGDavalos 1:00:43
ありがとうございました。

